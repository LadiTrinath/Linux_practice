### **Filesystem Hierarchy Standard (FHS) and Commands for User and File Management**

Below is a detailed summary of the **Filesystem Hierarchy Standard (FHS)** along with the commands provided, practical examples, explanations, and the "why" behind each command.

---

### **Filesystem Hierarchy Standard (FHS)**

The **FHS** defines the directory structure of Unix-like systems to standardize file organization. Here's a breakdown:

| **Directory** | **Purpose** | **Examples and Notes** |
|---------------|-------------|-------------------------|
| **/** (Root)  | The top-level directory from which all other directories branch out. | **Important**: All directories stem from `/`. |
| **/bin**      | Essential command binaries (e.g., `ls`, `cp`, `mv`). | Needed even in single-user mode. |
| **/boot**     | Boot loader files (e.g., kernels, GRUB configuration). | Critical for system startup. |
| **/dev**      | Device files (e.g., `/dev/sda` for disk drives). | Interfaces with hardware devices. |
| **/etc**      | System configuration files (e.g., `/etc/passwd`). | Stores configurations for services and users. |
| **/home**     | User home directories (e.g., `/home/user1`). | Contains personal files for each user. |
| **/lib**      | Shared libraries for `/bin` and `/sbin` programs. | Includes critical dependencies. |
| **/media**    | Mount points for removable media (e.g., USB drives). | Temporary access to external storage. |
| **/mnt**      | Temporary mount points for filesystems. | Used for manual or custom mounts. |
| **/opt**      | Optional software or third-party applications. | For add-on or external software. |
| **/sbin**     | System binaries for administrative tasks (e.g., `fsck`). | Usually run by the root user. |
| **/srv**      | Data for services provided by the system. | Example: `/srv/www` for web server files. |
| **/tmp**      | Temporary files cleared between reboots. | Use for temporary file storage. |
| **/usr**      | Secondary hierarchy for user programs and utilities. | Contains apps, documentation, and libraries. |
| **/var**      | Variable data files (e.g., logs, caches, and spools). | Example: `/var/log/syslog` for system logs. |

---

### **Commands and File/Directory Management**

#### **1. Create Nested Directories**
- **Command**: `mkdir -p <path>`
  - **Example**: `mkdir -p a/b/c/d/e`
  - **Explanation**: Creates directories in the specified hierarchy (including parent directories).
  - **Why**: Saves time when creating multiple nested directories.

---

#### **2. Copy Files and Directories**
- **Command**: `cp -rp <src> <dest>`
  - **Example**: `cp -rp /home/user1 /home/user2`
  - **Explanation**: Copies files and directories recursively (`-r`) while preserving file attributes (`-p`).
  - **Why**: Ensures a complete and accurate copy of files/directories.

---

#### **3. Move/Rename Files or Directories**
- **Command**: `mv <src> <dest>`
  - **Example**: `mv file1 /home/user1/`
  - **Explanation**: Moves or renames files/directories.
  - **Why**: Efficiently organize or rename files and folders.

---

#### **4. Absolute vs Relative Paths**
- **Absolute Path**: Starts from the root directory (`/`).
  - **Example**: `/home/user1/file.txt`
- **Relative Path**: Starts from the current directory.
  - **Example**: `./file.txt` (or `../file.txt` for the parent directory).
- **Why**: Absolute paths are precise; relative paths are shorter and more convenient within specific contexts.

---

### **User Management Commands**

#### **1. Create a New User**
- **Command**: `useradd <username>`
  - **Example**: `useradd madhu`
- **Explanation**: Adds a new user to the system.
- **Why**: Set up new users for access and permissions.

#### **2. Set a Password**
- **Command**: `passwd <username>`
  - **Example**: `passwd madhu`
- **Explanation**: Sets or updates the user's password.
- **Why**: Ensures user accounts are secure.

#### **3. Modify User Information**
- **Command**: `usermod -c "<comment>" <username>`
  - **Example**: `usermod -c "DevOps User" madhu`
- **Explanation**: Updates user details (e.g., add comments or descriptions).
- **Why**: Adds clarity for administrators.

#### **4. View User Details**
- **Command**: `cat /etc/passwd`
  - **Explanation**: Lists all users and their system information.
  - **Why**: Verify user details, such as shell and home directory.

#### **5. Switch to Another User**
- **Command**: `su - <username>`
  - **Example**: `su - madhu`
- **Explanation**: Switches to the specified user account.
- **Why**: Allows performing tasks as another user.

#### **6. Delete a User**
- **Command**: `userdel -r <username>`
  - **Example**: `userdel -r madhu`
  - **Explanation**: Deletes a user and their home directory (`-r`).
  - **Why**: Removes unused or unauthorized accounts.

---

### **File Content Inspection**

#### **1. Display File Start**
- **Command**: `head -n <filename>`
  - **Example**: `head -n 5 file.txt`
  - **Explanation**: Shows the first `n` lines of the file.
  - **Why**: Quickly preview the beginning of a file.

---

#### **2. Display File End**
- **Command**: `tail -n <filename>`
  - **Example**: `tail -n 10 file.txt`
  - **Explanation**: Shows the last `n` lines of the file.
  - **Why**: Useful for viewing logs or recent changes.

---

#### **3. View File Content Page by Page**
- **Command**: `more <filename>`
  - **Example**: `more file.txt`
  - **Explanation**: Displays file content one screen/page at a time.
  - **Why**: Useful for reading large files.

---

### **File Statistics**

#### **1. Word Count (wc)**
- **Command**: `wc <filename>`
  - **Examples**:
    - `wc -l <filename>` → Counts lines.
    - `wc -w <filename>` → Counts words.
    - `wc -c <filename>` → Counts characters.
  - **Explanation**: Provides statistics about files (lines, words, or characters).
  - **Why**: Quickly analyze file size or content structure.

**Practical Example**:
```bash
wc /etc/passwd       # Total lines, words, and characters in the file.
wc -l /etc/passwd    # Only counts the number of lines.
wc -w /etc/passwd    # Only counts the number of words.
wc -c /etc/passwd    # Only counts the number of characters.
```

---

### **Practical Workflow Example**

**Scenario**: Managing Users, Directories, and File Content

```bash
# Step 1: Create a new user and set a password
useradd devuser
passwd devuser

# Step 2: Verify the user details
cat /etc/passwd

# Step 3: Switch to the new user
su - devuser
whoami

# Step 4: Create directories and copy files
mkdir -p /home/devuser/project/docs
touch /home/devuser/project/docs/file1.txt
cp -rp /home/devuser/project/docs /home/devuser/backup/

# Step 5: Check file content and statistics
head -n 5 /home/devuser/backup/file1.txt
tail -n 10 /home/devuser/backup/file1.txt
wc -l /home/devuser/backup/file1.txt

# Step 6: Delete the user after completing tasks
exit    # Exit the devuser session
userdel -r devuser
```

---

### **Why Practice These Commands?**
1. **User Management**: Essential for setting up, modifying, or deleting users in a multi-user environment.
2. **Filesystem Navigation**: Helps you understand the FHS and how Linux organizes its system and application files.
3. **File Content Management**: Allows you to inspect and analyze files efficiently.
4. **Automation**: Many of these commands form the basis for scripting and system automation.

By practicing these commands, you'll become adept at managing Linux systems in real-world scenarios.
